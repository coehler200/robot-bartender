<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\mixingrobot.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\mixingrobot.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6180002: Last Updated: Tue Apr  4 00:00:50 2023
<BR><P>
<H3>Maximum Stack Usage =        188 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
SysTick_Handler &rArr; dispenseUpdate &rArr; __dispenseNext &rArr; writeLcdInt &rArr; writeLcdString &rArr; sendLcdChar &rArr; delayMS &rArr; delay
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[47]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from main.o(.text.EXTI2_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from main.o(.text.EXTI4_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from main.o(.text.SysTick_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[35]">SystemInit</a> from system_stm32f10x.o(.text.SystemInit) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[36]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[37]">__menuFuction0</a> from menu.o(.text.__menuFuction0) referenced 2 times from menu.o(.text.__buildMenu)
 <LI><a href="#[39]">__menuFuction0_0</a> from menu.o(.text.__menuFuction0_0) referenced 2 times from menu.o(.text.__buildMenu)
 <LI><a href="#[3a]">__menuFuction0_1</a> from menu.o(.text.__menuFuction0_1) referenced 2 times from menu.o(.text.__buildMenu)
 <LI><a href="#[3b]">__menuFuction0_2</a> from menu.o(.text.__menuFuction0_2) referenced 2 times from menu.o(.text.__buildMenu)
 <LI><a href="#[3c]">__menuFuction0_3</a> from menu.o(.text.__menuFuction0_3) referenced 2 times from menu.o(.text.__buildMenu)
 <LI><a href="#[3d]">__menuFuction0_4</a> from menu.o(.text.__menuFuction0_4) referenced 2 times from menu.o(.text.__buildMenu)
 <LI><a href="#[3e]">__menuFuction0_5</a> from menu.o(.text.__menuFuction0_5) referenced 2 times from menu.o(.text.__buildMenu)
 <LI><a href="#[38]">__menuFuction1</a> from menu.o(.text.__menuFuction1) referenced 2 times from menu.o(.text.__buildMenu)
 <LI><a href="#[3f]">__menuFuction1_0</a> from menu.o(.text.__menuFuction1_0) referenced 2 times from menu.o(.text.__buildMenu)
 <LI><a href="#[40]">__menuFuction1_1</a> from menu.o(.text.__menuFuction1_1) referenced 2 times from menu.o(.text.__buildMenu)
 <LI><a href="#[41]">__menuFuction1_2</a> from menu.o(.text.__menuFuction1_2) referenced 2 times from menu.o(.text.__buildMenu)
 <LI><a href="#[42]">__menuFuction1_3</a> from menu.o(.text.__menuFuction1_3) referenced 2 times from menu.o(.text.__buildMenu)
 <LI><a href="#[43]">__menuFuction1_4</a> from menu.o(.text.__menuFuction1_4) referenced 2 times from menu.o(.text.__buildMenu)
 <LI><a href="#[44]">__menuFuction1_5</a> from menu.o(.text.__menuFuction1_5) referenced 2 times from menu.o(.text.__buildMenu)
 <LI><a href="#[45]">__menuFuction1_6</a> from menu.o(.text.__menuFuction1_6) referenced 2 times from menu.o(.text.__buildMenu)
 <LI><a href="#[46]">__menuFuction1_7</a> from menu.o(.text.__menuFuction1_7) referenced 2 times from menu.o(.text.__buildMenu)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[36]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[48]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[4a]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[a8]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[a9]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[aa]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[4e]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[ab]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[ac]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[ad]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[ae]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[af]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[b0]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[b1]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[b2]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[b3]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[b4]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[b5]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[b6]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[b7]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[b8]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[b9]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[ba]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[bb]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[bc]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[bd]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[be]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[bf]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[c0]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[53]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[c1]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[c2]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[c3]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[c4]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[c5]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[c6]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[c7]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[49]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[c8]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[4b]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[4d]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[c9]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[4f]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; menuUpdate &rArr; __drawMenu &rArr; setLcdCursorPos &rArr; sendLcdCommand &rArr; sendLcdHalfCommand &rArr; delayMS &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ca]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[57]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[52]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[cb]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[54]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[cc]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[cd]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[51]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[cf]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[d0]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[d1]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(.text.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = EXTI2_IRQHandler &rArr; menuSelect &rArr; primeNext &rArr; __primeState &rArr; writeLcdInt &rArr; writeLcdString &rArr; sendLcdChar &rArr; delayMS &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSelect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(.text.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotEncEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = SysTick_Handler &rArr; dispenseUpdate &rArr; __dispenseNext &rArr; writeLcdInt &rArr; writeLcdString &rArr; sendLcdChar &rArr; delayMS &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispenseUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>SystemInit</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, system_stm32f10x.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[5f]"></a>__appendMenuChild</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, menu.o(.text.__appendMenuChild))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __appendMenuChild
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__buildMenu
</UL>

<P><STRONG><a name="[5d]"></a>__buildMenu</STRONG> (Thumb, 654 bytes, Stack size 88 bytes, menu.o(.text.__buildMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = __buildMenu &rArr; __setMenuItem
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__appendMenuChild
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__setMenuItem
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupMenu
</UL>

<P><STRONG><a name="[60]"></a>__dispenseNext</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, dispense.o(.text.__dispenseNext))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = __dispenseNext &rArr; writeLcdInt &rArr; writeLcdString &rArr; sendLcdChar &rArr; delayMS &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupSystickISR
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopSystickISR
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeLcdInt
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerValve4
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerValve3
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerValve2
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerValve1
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerPump
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispenseCancel
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearLcd
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeLcdString
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOff
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispenseBegin
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispenseUpdate
</UL>

<P><STRONG><a name="[6d]"></a>__drawMenu</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, menu.o(.text.__drawMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = __drawMenu &rArr; setLcdCursorPos &rArr; sendLcdCommand &rArr; sendLcdHalfCommand &rArr; delayMS &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendLcdChar
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearLcd
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLcdCursorPos
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeLcdString
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSelect
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuUpdate
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupMenu
</UL>

<P><STRONG><a name="[37]"></a>__menuFuction0</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, menu.o(.text.__menuFuction0))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text.__buildMenu)
</UL>
<P><STRONG><a name="[39]"></a>__menuFuction0_0</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, menu.o(.text.__menuFuction0_0))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text.__buildMenu)
</UL>
<P><STRONG><a name="[3a]"></a>__menuFuction0_1</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, menu.o(.text.__menuFuction0_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = __menuFuction0_1 &rArr; dispenseBegin &rArr; __dispenseNext &rArr; writeLcdInt &rArr; writeLcdString &rArr; sendLcdChar &rArr; delayMS &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispenseBegin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text.__buildMenu)
</UL>
<P><STRONG><a name="[3b]"></a>__menuFuction0_2</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, menu.o(.text.__menuFuction0_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = __menuFuction0_2 &rArr; dispenseBegin &rArr; __dispenseNext &rArr; writeLcdInt &rArr; writeLcdString &rArr; sendLcdChar &rArr; delayMS &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispenseBegin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text.__buildMenu)
</UL>
<P><STRONG><a name="[3c]"></a>__menuFuction0_3</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, menu.o(.text.__menuFuction0_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = __menuFuction0_3 &rArr; dispenseBegin &rArr; __dispenseNext &rArr; writeLcdInt &rArr; writeLcdString &rArr; sendLcdChar &rArr; delayMS &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispenseBegin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text.__buildMenu)
</UL>
<P><STRONG><a name="[3d]"></a>__menuFuction0_4</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, menu.o(.text.__menuFuction0_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = __menuFuction0_4 &rArr; dispenseBegin &rArr; __dispenseNext &rArr; writeLcdInt &rArr; writeLcdString &rArr; sendLcdChar &rArr; delayMS &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispenseBegin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text.__buildMenu)
</UL>
<P><STRONG><a name="[3e]"></a>__menuFuction0_5</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, menu.o(.text.__menuFuction0_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = __menuFuction0_5 &rArr; dispenseBegin &rArr; __dispenseNext &rArr; writeLcdInt &rArr; writeLcdString &rArr; sendLcdChar &rArr; delayMS &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispenseBegin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text.__buildMenu)
</UL>
<P><STRONG><a name="[38]"></a>__menuFuction1</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, menu.o(.text.__menuFuction1))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text.__buildMenu)
</UL>
<P><STRONG><a name="[3f]"></a>__menuFuction1_0</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, menu.o(.text.__menuFuction1_0))
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text.__buildMenu)
</UL>
<P><STRONG><a name="[40]"></a>__menuFuction1_1</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, menu.o(.text.__menuFuction1_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = __menuFuction1_1 &rArr; primeBegin &rArr; __primeState &rArr; writeLcdInt &rArr; writeLcdString &rArr; sendLcdChar &rArr; delayMS &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;primeBegin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text.__buildMenu)
</UL>
<P><STRONG><a name="[41]"></a>__menuFuction1_2</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, menu.o(.text.__menuFuction1_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __menuFuction1_2 &rArr; togglePump &rArr; powerPump &rArr; setPWM3_2
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;togglePump
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text.__buildMenu)
</UL>
<P><STRONG><a name="[42]"></a>__menuFuction1_3</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, menu.o(.text.__menuFuction1_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __menuFuction1_3 &rArr; toggleValve1 &rArr; invertPin
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toggleValve1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text.__buildMenu)
</UL>
<P><STRONG><a name="[43]"></a>__menuFuction1_4</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, menu.o(.text.__menuFuction1_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __menuFuction1_4 &rArr; toggleValve2 &rArr; invertPin
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toggleValve2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text.__buildMenu)
</UL>
<P><STRONG><a name="[44]"></a>__menuFuction1_5</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, menu.o(.text.__menuFuction1_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __menuFuction1_5 &rArr; toggleValve3 &rArr; invertPin
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toggleValve3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text.__buildMenu)
</UL>
<P><STRONG><a name="[45]"></a>__menuFuction1_6</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, menu.o(.text.__menuFuction1_6))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __menuFuction1_6 &rArr; toggleValve4 &rArr; invertPin
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toggleValve4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text.__buildMenu)
</UL>
<P><STRONG><a name="[46]"></a>__menuFuction1_7</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, menu.o(.text.__menuFuction1_7))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __menuFuction1_7 &rArr; powerOff &rArr; setPin
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menu.o(.text.__buildMenu)
</UL>
<P><STRONG><a name="[77]"></a>__primeState</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, prime.o(.text.__primeState))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = __primeState &rArr; writeLcdInt &rArr; writeLcdString &rArr; sendLcdChar &rArr; delayMS &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeLcdInt
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerValve4
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerValve3
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerValve2
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerValve1
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerPump
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearLcd
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLcdCursorPos
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeLcdString
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOff
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;primeNext
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;primeBegin
</UL>

<P><STRONG><a name="[5e]"></a>__setMenuItem</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, menu.o(.text.__setMenuItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __setMenuItem
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__buildMenu
</UL>

<P><STRONG><a name="[63]"></a>clearLcd</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lcd.o(.text.clearLcd))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = clearLcd &rArr; sendLcdCommand &rArr; sendLcdHalfCommand &rArr; delayMS &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendLcdCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dispenseNext
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__primeState
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitForCup
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__drawMenu
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7a]"></a>delay</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, clock.o(.text.delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = delay
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMS
</UL>

<P><STRONG><a name="[79]"></a>delayMS</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, clock.o(.text.delayMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = delayMS &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendLcdHalfCommand
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playDone
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playInteraction2
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playInteraction
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendLcdChar
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupLcd
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[70]"></a>dispenseBegin</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, dispense.o(.text.dispenseBegin))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = dispenseBegin &rArr; __dispenseNext &rArr; writeLcdInt &rArr; writeLcdString &rArr; sendLcdChar &rArr; delayMS &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dispenseNext
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitForCup
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__menuFuction0_5
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__menuFuction0_4
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__menuFuction0_3
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__menuFuction0_2
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__menuFuction0_1
</UL>

<P><STRONG><a name="[62]"></a>dispenseCancel</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, dispense.o(.text.dispenseCancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = dispenseCancel &rArr; playDone &rArr; delayMS &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playDone
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopSystickISR
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOff
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dispenseNext
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSelect
</UL>

<P><STRONG><a name="[5c]"></a>dispenseUpdate</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, dispense.o(.text.dispenseUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = dispenseUpdate &rArr; __dispenseNext &rArr; writeLcdInt &rArr; writeLcdString &rArr; sendLcdChar &rArr; delayMS &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dispenseNext
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeLcdInt
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendLcdChar
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLcdCursorPos
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[98]"></a>intToString</STRONG> (Thumb, 208 bytes, Stack size 28 bytes, functions.o(.text.intToString))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = intToString
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeLcdInt
</UL>

<P><STRONG><a name="[96]"></a>invertPin</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gpio.o(.text.invertPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = invertPin
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toggleValve4
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toggleValve3
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toggleValve2
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toggleValve1
</UL>

<P><STRONG><a name="[50]"></a>main</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = main &rArr; menuUpdate &rArr; __drawMenu &rArr; setLcdCursorPos &rArr; sendLcdCommand &rArr; sendLcdHalfCommand &rArr; delayMS &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuUpdate
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupPA4ISR
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupPB2ISR
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupMenu
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearLcd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMS
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLcdCursorPos
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeLcdString
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOff
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPWM3_1
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupPWM3
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_ADC1
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupLcd
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupGPIO
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startClk_gpioB
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startClk_gpioA
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysClkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[58]"></a>menuSelect</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, menu.o(.text.menuSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = menuSelect &rArr; primeNext &rArr; __primeState &rArr; writeLcdInt &rArr; writeLcdString &rArr; sendLcdChar &rArr; delayMS &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;primeNext
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispenseCancel
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playInteraction2
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__drawMenu
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
</UL>

<P><STRONG><a name="[8c]"></a>menuUpdate</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, menu.o(.text.menuUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = menuUpdate &rArr; __drawMenu &rArr; setLcdCursorPos &rArr; sendLcdCommand &rArr; sendLcdHalfCommand &rArr; delayMS &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playInteraction
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotEncDiff
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__drawMenu
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7c]"></a>playDone</STRONG> (Thumb, 516 bytes, Stack size 24 bytes, sounds.o(.text.playDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = playDone &rArr; delayMS &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMS
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPWM3_1
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispenseCancel
</UL>

<P><STRONG><a name="[90]"></a>playInteraction</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sounds.o(.text.playInteraction))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = playInteraction &rArr; delayMS &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMS
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPWM3_1
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuUpdate
</UL>

<P><STRONG><a name="[8d]"></a>playInteraction2</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, sounds.o(.text.playInteraction2))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = playInteraction2 &rArr; delayMS &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMS
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPWM3_1
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSelect
</UL>

<P><STRONG><a name="[66]"></a>powerOff</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, power.o(.text.powerOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = powerOff &rArr; setPin
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPin
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPWM3_2
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dispenseNext
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__primeState
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispenseCancel
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__menuFuction1_7
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[68]"></a>powerPump</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, power.o(.text.powerPump))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = powerPump &rArr; setPWM3_2
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPWM3_2
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dispenseNext
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__primeState
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;togglePump
</UL>

<P><STRONG><a name="[67]"></a>powerValve1</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, power.o(.text.powerValve1))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = powerValve1 &rArr; setPin
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPin
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dispenseNext
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__primeState
</UL>

<P><STRONG><a name="[69]"></a>powerValve2</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, power.o(.text.powerValve2))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = powerValve2 &rArr; setPin
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPin
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dispenseNext
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__primeState
</UL>

<P><STRONG><a name="[6a]"></a>powerValve3</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, power.o(.text.powerValve3))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = powerValve3 &rArr; setPin
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPin
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dispenseNext
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__primeState
</UL>

<P><STRONG><a name="[6b]"></a>powerValve4</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, power.o(.text.powerValve4))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = powerValve4 &rArr; setPin
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPin
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dispenseNext
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__primeState
</UL>

<P><STRONG><a name="[71]"></a>primeBegin</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, prime.o(.text.primeBegin))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = primeBegin &rArr; __primeState &rArr; writeLcdInt &rArr; writeLcdString &rArr; sendLcdChar &rArr; delayMS &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__primeState
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitForCup
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__menuFuction1_1
</UL>

<P><STRONG><a name="[8e]"></a>primeNext</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, prime.o(.text.primeNext))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = primeNext &rArr; __primeState &rArr; writeLcdInt &rArr; writeLcdString &rArr; sendLcdChar &rArr; delayMS &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__primeState
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuSelect
</UL>

<P><STRONG><a name="[93]"></a>readAnalogPin</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, analog.o(.text.readAnalogPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = readAnalogPin &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitForCup
</UL>

<P><STRONG><a name="[8f]"></a>rotEncDiff</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, rotenc.o(.text.rotEncDiff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rotEncDiff
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menuUpdate
</UL>

<P><STRONG><a name="[59]"></a>rotEncEvent</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, rotenc.o(.text.rotEncEvent))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
</UL>

<P><STRONG><a name="[6e]"></a>sendLcdChar</STRONG> (Thumb, 236 bytes, Stack size 48 bytes, lcd.o(.text.sendLcdChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = sendLcdChar &rArr; delayMS &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPin
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMS
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__drawMenu
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispenseUpdate
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeLcdString
</UL>

<P><STRONG><a name="[78]"></a>sendLcdCommand</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lcd.o(.text.sendLcdCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = sendLcdCommand &rArr; sendLcdHalfCommand &rArr; delayMS &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendLcdHalfCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearLcd
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLcdCursorPos
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupLcd
</UL>

<P><STRONG><a name="[95]"></a>sendLcdHalfCommand</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, lcd.o(.text.sendLcdHalfCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = sendLcdHalfCommand &rArr; delayMS &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPin
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMS
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendLcdCommand
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setupLcd
</UL>

<P><STRONG><a name="[6f]"></a>setLcdCursorPos</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, lcd.o(.text.setLcdCursorPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = setLcdCursorPos &rArr; sendLcdCommand &rArr; sendLcdHalfCommand &rArr; delayMS &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendLcdCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__primeState
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__drawMenu
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispenseUpdate
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[88]"></a>setPWM3_1</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, pwm.o(.text.setPWM3_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = setPWM3_1
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playDone
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playInteraction2
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;playInteraction
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[91]"></a>setPWM3_2</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, pwm.o(.text.setPWM3_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = setPWM3_2
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerPump
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOff
</UL>

<P><STRONG><a name="[92]"></a>setPin</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gpio.o(.text.setPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setPin
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendLcdHalfCommand
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerValve4
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerValve3
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerValve2
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerValve1
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendLcdChar
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOff
</UL>

<P><STRONG><a name="[84]"></a>setupGPIO</STRONG> (Thumb, 466 bytes, Stack size 0 bytes, gpio.o(.text.setupGPIO))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[85]"></a>setupLcd</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lcd.o(.text.setupLcd))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = setupLcd &rArr; sendLcdCommand &rArr; sendLcdHalfCommand &rArr; delayMS &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendLcdCommand
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendLcdHalfCommand
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMS
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[89]"></a>setupMenu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, menu.o(.text.setupMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = setupMenu &rArr; __drawMenu &rArr; setLcdCursorPos &rArr; sendLcdCommand &rArr; sendLcdHalfCommand &rArr; delayMS &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__drawMenu
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__buildMenu
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8b]"></a>setupPA4ISR</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, interupt.o(.text.setupPA4ISR))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8a]"></a>setupPB2ISR</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, interupt.o(.text.setupPB2ISR))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[87]"></a>setupPWM3</STRONG> (Thumb, 222 bytes, Stack size 4 bytes, pwm.o(.text.setupPWM3))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = setupPWM3
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6c]"></a>setupSystickISR</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, interupt.o(.text.setupSystickISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = setupSystickISR
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dispenseNext
</UL>

<P><STRONG><a name="[86]"></a>setup_ADC1</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, analog.o(.text.setup_ADC1))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[82]"></a>startClk_gpioA</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gpio.o(.text.startClk_gpioA))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[83]"></a>startClk_gpioB</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gpio.o(.text.startClk_gpioB))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[61]"></a>stopSystickISR</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, interupt.o(.text.stopSystickISR))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dispenseNext
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispenseCancel
</UL>

<P><STRONG><a name="[81]"></a>sysClkInit</STRONG> (Thumb, 208 bytes, Stack size 0 bytes, clock.o(.text.sysClkInit))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[72]"></a>togglePump</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, power.o(.text.togglePump))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = togglePump &rArr; powerPump &rArr; setPWM3_2
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerPump
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__menuFuction1_2
</UL>

<P><STRONG><a name="[73]"></a>toggleValve1</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, power.o(.text.toggleValve1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = toggleValve1 &rArr; invertPin
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invertPin
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__menuFuction1_3
</UL>

<P><STRONG><a name="[74]"></a>toggleValve2</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, power.o(.text.toggleValve2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = toggleValve2 &rArr; invertPin
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invertPin
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__menuFuction1_4
</UL>

<P><STRONG><a name="[75]"></a>toggleValve3</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, power.o(.text.toggleValve3))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = toggleValve3 &rArr; invertPin
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invertPin
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__menuFuction1_5
</UL>

<P><STRONG><a name="[76]"></a>toggleValve4</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, power.o(.text.toggleValve4))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = toggleValve4 &rArr; invertPin
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invertPin
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__menuFuction1_6
</UL>

<P><STRONG><a name="[7b]"></a>waitForCup</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, functions.o(.text.waitForCup))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = waitForCup &rArr; writeLcdString &rArr; sendLcdChar &rArr; delayMS &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readAnalogPin
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearLcd
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeLcdString
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;primeBegin
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispenseBegin
</UL>

<P><STRONG><a name="[65]"></a>writeLcdInt</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, lcd.o(.text.writeLcdInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = writeLcdInt &rArr; writeLcdString &rArr; sendLcdChar &rArr; delayMS &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intToString
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeLcdString
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dispenseNext
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__primeState
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispenseUpdate
</UL>

<P><STRONG><a name="[64]"></a>writeLcdString</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lcd.o(.text.writeLcdString))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = writeLcdString &rArr; sendLcdChar &rArr; delayMS &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendLcdChar
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dispenseNext
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeLcdInt
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__primeState
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitForCup
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__drawMenu
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9d]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[7e]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readAnalogPin
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispenseUpdate
</UL>

<P><STRONG><a name="[99]"></a>_ddiv</STRONG> (Thumb, 556 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[d4]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)

<P><STRONG><a name="[9c]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dneq
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deq
</UL>

<P><STRONG><a name="[80]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispenseUpdate
</UL>

<P><STRONG><a name="[9e]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[7d]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispenseUpdate
</UL>

<P><STRONG><a name="[d5]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[94]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readAnalogPin
</UL>

<P><STRONG><a name="[d6]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[d7]"></a>__aeabi_cdcmpge</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dgeqf.o(x$fpl$dgeqf), UNUSED)

<P><STRONG><a name="[9f]"></a>_dcmpge</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dgeqf.o(x$fpl$dgeqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dgeq
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dgr
</UL>

<P><STRONG><a name="[d8]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[a0]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dls
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dleq
</UL>

<P><STRONG><a name="[d9]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[7f]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispenseUpdate
</UL>

<P><STRONG><a name="[a1]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[9b]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[9a]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[da]"></a>__aeabi_dcmpeq</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)

<P><STRONG><a name="[a2]"></a>_deq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[a3]"></a>_dneq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[db]"></a>__aeabi_dcmpgt</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)

<P><STRONG><a name="[a4]"></a>_dgr</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
</UL>

<P><STRONG><a name="[97]"></a>__aeabi_dcmpge</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmpge
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitForCup
</UL>

<P><STRONG><a name="[a5]"></a>_dgeq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
</UL>

<P><STRONG><a name="[dc]"></a>__aeabi_dcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)

<P><STRONG><a name="[a6]"></a>_dleq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[dd]"></a>__aeabi_dcmplt</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)

<P><STRONG><a name="[a7]"></a>_dls</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[5a]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(.text.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[5b]"></a>SetSysClockTo72</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, system_stm32f10x.o(.text.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
